#include <stdio.h>

#define TAMANHO_TABULEIRO 10
#define TAMANHO_NAVIO 3

// Função para inicializar o tabuleiro com água (0)
void inicializarTabuleiro(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO]) {
    for (int i = 0; i < TAMANHO_TABULEIRO; i++) {
        for (int j = 0; j < TAMANHO_TABULEIRO; j++) {
            tabuleiro[i][j] = 0;  // Inicializa com 0 (representando água)
        }
    }
}

// Função para validar se uma posição é válida para o navio horizontal
int validarPosicaoHorizontal(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO], int linha, int coluna) {
    for (int i = 0; i < TAMANHO_NAVIO; i++) {
        if (coluna + i >= TAMANHO_TABULEIRO || tabuleiro[linha][coluna + i] != 0) {
            return 0;  // A posição não é válida
        }
    }
    return 1;  // A posição é válida
}

// Função para posicionar o navio horizontalmente
int posicionarNavioHorizontal(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO], int linha, int coluna) {
    if (validarPosicaoHorizontal(tabuleiro, linha, coluna)) {
        for (int i = 0; i < TAMANHO_NAVIO; i++) {
            tabuleiro[linha][coluna + i] = 3;  // Representa o navio com o número 3
            printf("Navio Horizontal - Parte %d: Linha %d, Coluna %d\n", i + 1, linha, coluna + i);
        }
        return 1;  // Posicionamento bem-sucedido
    }
    return 0;  // Posição inválida
}

// Função para validar se uma posição é válida para o navio vertical
int validarPosicaoVertical(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO], int linha, int coluna) {
    for (int i = 0; i < TAMANHO_NAVIO; i++) {
        if (linha + i >= TAMANHO_TABULEIRO || tabuleiro[linha + i][coluna] != 0) {
            return 0;  // A posição não é válida
        }
    }
    return 1;  // A posição é válida
}

// Função para posicionar o navio verticalmente
int posicionarNavioVertical(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO], int linha, int coluna) {
    if (validarPosicaoVertical(tabuleiro, linha, coluna)) {
        for (int i = 0; i < TAMANHO_NAVIO; i++) {
            tabuleiro[linha + i][coluna] = 3;  // Representa o navio com o número 3
            printf("Navio Vertical - Parte %d: Linha %d, Coluna %d\n", i + 1, linha + i, coluna);
        }
        return 1;  // Posicionamento bem-sucedido
    }
    return 0;  // Posição inválida
}

// Função para validar se uma posição é válida para o navio diagonal crescente
int validarPosicaoDiagonalCrescente(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO], int linha, int coluna) {
    for (int i = 0; i < TAMANHO_NAVIO; i++) {
        if (linha + i >= TAMANHO_TABULEIRO || coluna + i >= TAMANHO_TABULEIRO || tabuleiro[linha + i][coluna + i] != 0) {
            return 0;  // A posição não é válida
        }
    }
    return 1;  // A posição é válida
}

// Função para posicionar o navio na diagonal crescente
int posicionarNavioDiagonalCrescente(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO], int linha, int coluna) {
    if (validarPosicaoDiagonalCrescente(tabuleiro, linha, coluna)) {
        for (int i = 0; i < TAMANHO_NAVIO; i++) {
            tabuleiro[linha + i][coluna + i] = 3;  // Representa o navio com o número 3
            printf("Navio Diagonal Crescente - Parte %d: Linha %d, Coluna %d\n", i + 1, linha + i, coluna + i);
        }
        return 1;  // Posicionamento bem-sucedido
    }
    return 0;  // Posição inválida
}

// Função para validar se uma posição é válida para o navio diagonal decrescente
int validarPosicaoDiagonalDecrescente(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO], int linha, int coluna) {
    for (int i = 0; i < TAMANHO_NAVIO; i++) {
        if (linha + i >= TAMANHO_TABULEIRO || coluna - i < 0 || tabuleiro[linha + i][coluna - i] != 0) {
            return 0;  // A posição não é válida
        }
    }
    return 1;  // A posição é válida
}

// Função para posicionar o navio na diagonal decrescente
int posicionarNavioDiagonalDecrescente(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO], int linha, int coluna) {
    if (validarPosicaoDiagonalDecrescente(tabuleiro, linha, coluna)) {
        for (int i = 0; i < TAMANHO_NAVIO; i++) {
            tabuleiro[linha + i][coluna - i] = 3;  // Representa o navio com o número 3
            printf("Navio Diagonal Decrescente - Parte %d: Linha %d, Coluna %d\n", i + 1, linha + i, coluna - i);
        }
        return 1;  // Posicionamento bem-sucedido
    }
    return 0;  // Posição inválida
}

// Função para exibir o tabuleiro como uma string formatada
void exibirTabuleiro(int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO]) {
    printf("\nTabuleiro de Batalha Naval:\n");
    for (int i = 0; i < TAMANHO_TABULEIRO; i++) {
        for (int j = 0; j < TAMANHO_TABULEIRO; j++) {
            printf("%d ", tabuleiro[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int tabuleiro[TAMANHO_TABULEIRO][TAMANHO_TABULEIRO];

    // Inicializar o tabuleiro
    inicializarTabuleiro(tabuleiro);

    // Definindo posições fixas dos navios (podem ser alteradas no código)
    int linhaNavioHorizontal = 2, colunaNavioHorizontal = 1;
    int linhaNavioVertical = 5, colunaNavioVertical = 4;
    int linhaNavioDiagonalCrescente = 3, colunaNavioDiagonalCrescente = 3;
    int linhaNavioDiagonalDecrescente = 6, colunaNavioDiagonalDecrescente = 7;

    // Posicionando os navios
    if (!posicionarNavioHorizontal(tabuleiro, linhaNavioHorizontal, colunaNavioHorizontal)) {
        printf("Falha ao posicionar o navio horizontal.\n");
    }

    if (!posicionarNavioVertical(tabuleiro, linhaNavioVertical, colunaNavioVertical)) {
        printf("Falha ao posicionar o navio vertical.\n");
    }

    if (!posicionarNavioDiagonalCrescente(tabuleiro, linhaNavioDiagonalCrescente, colunaNavioDiagonalCrescente)) {
        printf("Falha ao posicionar o navio diagonal crescente.\n");
    }

    if (!posicionarNavioDiagonalDecrescente(tabuleiro, linhaNavioDiagonalDecrescente, colunaNavioDiagonalDecrescente)) {
        printf("Falha ao posicionar o navio diagonal decrescente.\n");
    }

    // Exibindo o tabuleiro
    exibirTabuleiro(tabuleiro);

    return 0;
}
